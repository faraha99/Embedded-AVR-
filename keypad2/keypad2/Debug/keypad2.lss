
keypad2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000b0  000001e7  2**0
                  ALLOC
  2 .comment      0000002f  00000000  00000000  00000c95  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 00000038  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000029eb  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a69  00000000  00000000  00003837  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d43  00000000  00000000  000042a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000030c  00000000  00000000  00004fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000029b  00000000  00000000  000052f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001415  00000000  00000000  0000558b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  000069a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000b88  00000b88  00000c7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.DIO_voidSetPinDirection 0000003e  00000980  00000980  00000a74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.DIO_voidSetPinValue 0000003e  000009be  000009be  00000ab2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.DIO_u8GetPinValue 0000002c  00000a92  00000a92  00000b86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.DIO_SetPullUpRes 00000020  00000b3a  00000b3a  00000c2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.GPIO_setupPinDirection 000000e6  000005ac  000005ac  000006a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.GPIO_writePin 000000e6  00000692  00000692  00000786  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.KeyPad_Init 000000aa  00000828  00000828  0000091c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.KeyPad_GetChar 00000112  00000398  00000398  0000048c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .progmemx.data.KeyPad_Values 00000010  000000f3  000000f3  000001e7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 23 .text.LCD_sendCommand 0000014a  00000104  00000104  000001f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.LCD_init 00000068  000008d2  000008d2  000009c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.LCD_displayCharacter 0000014a  0000024e  0000024e  00000342  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.LCD_displayString 00000036  000009fc  000009fc  00000af0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.LCD_moveCursor 0000002e  00000a64  00000a64  00000b58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.strrev  00000032  00000a32  00000a32  00000b26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.itoa    000000b0  00000778  00000778  0000086c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.LCD_intgerToString 00000046  0000093a  0000093a  00000a2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .rodata.num.2156 0000000b  00800060  00000b96  00000c8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 32 .progmemx.data 00000043  000000b0  000000b0  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 33 .text.main    00000102  000004aa  000004aa  0000059e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.libgcc.div 00000018  00000b5a  00000b5a  00000c4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.libgcc.div 00000028  00000aea  00000aea  00000bde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.libgcc.div 00000028  00000b12  00000b12  00000c06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__dummy_fini 00000002  00000b90  00000b90  00000c84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.__dummy_funcs_on_exit 00000002  00000b92  00000b92  00000c86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__dummy_simulator_exit 00000002  00000b94  00000b94  00000c88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.exit    00000016  00000b72  00000b72  00000c66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.strlen  0000002c  00000abe  00000abe  00000bb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text._Exit   00000004  00000b8c  00000b8c  00000c80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
   8:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
   c:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
  10:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
  14:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
  18:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
  1c:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
  20:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
  24:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
  28:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
  2c:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
  30:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
  34:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
  38:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
  3c:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
  40:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
  44:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
  48:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
  4c:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>
  50:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 6b       	ori	r16, 0xB0	; 176
  58:	00 0b       	sbc	r16, r16
  5a:	96 00       	.word	0x0096	; ????

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d8 e0       	ldi	r29, 0x08	; 8
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	e4 e5       	ldi	r30, 0x54	; 84
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	17 c0       	rjmp	.+46     	; 0x9e <__do_clear_bss+0x8>
  70:	b5 91       	lpm	r27, Z+
  72:	a5 91       	lpm	r26, Z+
  74:	35 91       	lpm	r19, Z+
  76:	25 91       	lpm	r18, Z+
  78:	05 91       	lpm	r16, Z+
  7a:	07 fd       	sbrc	r16, 7
  7c:	0c c0       	rjmp	.+24     	; 0x96 <__do_clear_bss>
  7e:	95 91       	lpm	r25, Z+
  80:	85 91       	lpm	r24, Z+
  82:	ef 01       	movw	r28, r30
  84:	f9 2f       	mov	r31, r25
  86:	e8 2f       	mov	r30, r24
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 17       	cp	r26, r18
  8e:	b3 07       	cpc	r27, r19
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0x20>
  92:	fe 01       	movw	r30, r28
  94:	04 c0       	rjmp	.+8      	; 0x9e <__do_clear_bss+0x8>

00000096 <__do_clear_bss>:
  96:	1d 92       	st	X+, r1
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	e1 f7       	brne	.-8      	; 0x96 <__do_clear_bss>
  9e:	eb 35       	cpi	r30, 0x5B	; 91
  a0:	f4 07       	cpc	r31, r20
  a2:	31 f7       	brne	.-52     	; 0x70 <__do_copy_data+0x8>
  a4:	0e 94 55 02 	call	0x4aa	; 0x4aa <main>
  a8:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <exit>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

Disassembly of section .text:

00000b88 <__bad_interrupt>:
 b88:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.DIO_voidSetPinDirection:

00000980 <DIO_voidSetPinDirection>:
}

// Set the value of an entire port
void DIO_voidSetPortValue(u8 PortId, u8 Value) {
	// Set all the bits in the port register to 1 or 0
	*(volatile u8 *)(PortId + PORT_OFFSET) = Value;
 980:	41 30       	cpi	r20, 0x01	; 1
 982:	69 f4       	brne	.+26     	; 0x99e <DIO_voidSetPinDirection+0x1e>
 984:	e8 2f       	mov	r30, r24
 986:	f0 e0       	ldi	r31, 0x00	; 0
 988:	21 81       	ldd	r18, Z+1	; 0x01
 98a:	81 e0       	ldi	r24, 0x01	; 1
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	02 c0       	rjmp	.+4      	; 0x994 <DIO_voidSetPinDirection+0x14>
 990:	88 0f       	add	r24, r24
 992:	99 1f       	adc	r25, r25
 994:	6a 95       	dec	r22
 996:	e2 f7       	brpl	.-8      	; 0x990 <DIO_voidSetPinDirection+0x10>
 998:	82 2b       	or	r24, r18
 99a:	81 83       	std	Z+1, r24	; 0x01
 99c:	08 95       	ret
 99e:	41 11       	cpse	r20, r1
 9a0:	0d c0       	rjmp	.+26     	; 0x9bc <DIO_voidSetPinDirection+0x3c>
 9a2:	e8 2f       	mov	r30, r24
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	21 81       	ldd	r18, Z+1	; 0x01
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <DIO_voidSetPinDirection+0x32>
 9ae:	88 0f       	add	r24, r24
 9b0:	99 1f       	adc	r25, r25
 9b2:	6a 95       	dec	r22
 9b4:	e2 f7       	brpl	.-8      	; 0x9ae <DIO_voidSetPinDirection+0x2e>
 9b6:	80 95       	com	r24
 9b8:	82 23       	and	r24, r18
 9ba:	81 83       	std	Z+1, r24	; 0x01
 9bc:	08 95       	ret

Disassembly of section .text.DIO_voidSetPinValue:

000009be <DIO_voidSetPinValue>:
 9be:	41 30       	cpi	r20, 0x01	; 1
 9c0:	69 f4       	brne	.+26     	; 0x9dc <DIO_voidSetPinValue+0x1e>
 9c2:	e8 2f       	mov	r30, r24
 9c4:	f0 e0       	ldi	r31, 0x00	; 0
 9c6:	22 81       	ldd	r18, Z+2	; 0x02
 9c8:	81 e0       	ldi	r24, 0x01	; 1
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <DIO_voidSetPinValue+0x14>
 9ce:	88 0f       	add	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	6a 95       	dec	r22
 9d4:	e2 f7       	brpl	.-8      	; 0x9ce <DIO_voidSetPinValue+0x10>
 9d6:	82 2b       	or	r24, r18
 9d8:	82 83       	std	Z+2, r24	; 0x02
 9da:	08 95       	ret
 9dc:	41 11       	cpse	r20, r1
 9de:	0d c0       	rjmp	.+26     	; 0x9fa <DIO_voidSetPinValue+0x3c>
 9e0:	e8 2f       	mov	r30, r24
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	22 81       	ldd	r18, Z+2	; 0x02
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <DIO_voidSetPinValue+0x32>
 9ec:	88 0f       	add	r24, r24
 9ee:	99 1f       	adc	r25, r25
 9f0:	6a 95       	dec	r22
 9f2:	e2 f7       	brpl	.-8      	; 0x9ec <DIO_voidSetPinValue+0x2e>
 9f4:	80 95       	com	r24
 9f6:	82 23       	and	r24, r18
 9f8:	82 83       	std	Z+2, r24	; 0x02
 9fa:	08 95       	ret

Disassembly of section .text.DIO_u8GetPinValue:

00000a92 <DIO_u8GetPinValue>:
 a92:	e8 2f       	mov	r30, r24
 a94:	f0 e0       	ldi	r31, 0x00	; 0
 a96:	40 81       	ld	r20, Z
 a98:	81 e0       	ldi	r24, 0x01	; 1
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	9c 01       	movw	r18, r24
 a9e:	06 2e       	mov	r0, r22
 aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <DIO_u8GetPinValue+0x14>
 aa2:	22 0f       	add	r18, r18
 aa4:	33 1f       	adc	r19, r19
 aa6:	0a 94       	dec	r0
 aa8:	e2 f7       	brpl	.-8      	; 0xaa2 <DIO_u8GetPinValue+0x10>
 aaa:	84 2f       	mov	r24, r20
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	82 23       	and	r24, r18
 ab0:	93 23       	and	r25, r19
 ab2:	02 c0       	rjmp	.+4      	; 0xab8 <DIO_u8GetPinValue+0x26>
 ab4:	95 95       	asr	r25
 ab6:	87 95       	ror	r24
 ab8:	6a 95       	dec	r22
 aba:	e2 f7       	brpl	.-8      	; 0xab4 <DIO_u8GetPinValue+0x22>
 abc:	08 95       	ret

Disassembly of section .text.DIO_SetPullUpRes:

00000b3a <DIO_SetPullUpRes>:
}

void DIO_SetPullUpRes(u8 port, u8 pin)
{
	// Set the pin as an input
	DDRB &= ~(1 << pin);
 b3a:	27 b3       	in	r18, 0x17	; 23
 b3c:	81 e0       	ldi	r24, 0x01	; 1
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	02 c0       	rjmp	.+4      	; 0xb46 <DIO_SetPullUpRes+0xc>
 b42:	88 0f       	add	r24, r24
 b44:	99 1f       	adc	r25, r25
 b46:	6a 95       	dec	r22
 b48:	e2 f7       	brpl	.-8      	; 0xb42 <DIO_SetPullUpRes+0x8>
 b4a:	98 2f       	mov	r25, r24
 b4c:	90 95       	com	r25
 b4e:	92 23       	and	r25, r18
 b50:	97 bb       	out	0x17, r25	; 23

	// Enable the internal pull-up resistor
	PORTB |= (1 << pin);
 b52:	98 b3       	in	r25, 0x18	; 24
 b54:	89 2b       	or	r24, r25
 b56:	88 bb       	out	0x18, r24	; 24
 b58:	08 95       	ret

Disassembly of section .text.GPIO_setupPinDirection:

000005ac <GPIO_setupPinDirection>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 5ac:	68 30       	cpi	r22, 0x08	; 8
 5ae:	08 f0       	brcs	.+2      	; 0x5b2 <GPIO_setupPinDirection+0x6>
 5b0:	6f c0       	rjmp	.+222    	; 0x690 <GPIO_setupPinDirection+0xe4>
 5b2:	84 30       	cpi	r24, 0x04	; 4
 5b4:	08 f0       	brcs	.+2      	; 0x5b8 <GPIO_setupPinDirection+0xc>
 5b6:	6c c0       	rjmp	.+216    	; 0x690 <GPIO_setupPinDirection+0xe4>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	01 f1       	breq	.+64     	; 0x5fc <GPIO_setupPinDirection+0x50>
 5bc:	30 f0       	brcs	.+12     	; 0x5ca <GPIO_setupPinDirection+0x1e>
 5be:	82 30       	cpi	r24, 0x02	; 2
 5c0:	b1 f1       	breq	.+108    	; 0x62e <GPIO_setupPinDirection+0x82>
 5c2:	83 30       	cpi	r24, 0x03	; 3
 5c4:	09 f4       	brne	.+2      	; 0x5c8 <GPIO_setupPinDirection+0x1c>
 5c6:	4c c0       	rjmp	.+152    	; 0x660 <GPIO_setupPinDirection+0xb4>
 5c8:	08 95       	ret
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
 5ca:	41 30       	cpi	r20, 0x01	; 1
 5cc:	59 f4       	brne	.+22     	; 0x5e4 <GPIO_setupPinDirection+0x38>
			{
				SET_BIT(DDRA,pin_num);
 5ce:	2a b3       	in	r18, 0x1a	; 26
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <GPIO_setupPinDirection+0x2e>
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	6a 95       	dec	r22
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <GPIO_setupPinDirection+0x2a>
 5de:	82 2b       	or	r24, r18
 5e0:	8a bb       	out	0x1a, r24	; 26
 5e2:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 5e4:	2a b3       	in	r18, 0x1a	; 26
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <GPIO_setupPinDirection+0x44>
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	6a 95       	dec	r22
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <GPIO_setupPinDirection+0x40>
 5f4:	80 95       	com	r24
 5f6:	82 23       	and	r24, r18
 5f8:	8a bb       	out	0x1a, r24	; 26
 5fa:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 5fc:	41 30       	cpi	r20, 0x01	; 1
 5fe:	59 f4       	brne	.+22     	; 0x616 <GPIO_setupPinDirection+0x6a>
			{
				SET_BIT(DDRB,pin_num);
 600:	27 b3       	in	r18, 0x17	; 23
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	02 c0       	rjmp	.+4      	; 0x60c <GPIO_setupPinDirection+0x60>
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	6a 95       	dec	r22
 60e:	e2 f7       	brpl	.-8      	; 0x608 <GPIO_setupPinDirection+0x5c>
 610:	82 2b       	or	r24, r18
 612:	87 bb       	out	0x17, r24	; 23
 614:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 616:	27 b3       	in	r18, 0x17	; 23
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <GPIO_setupPinDirection+0x76>
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	6a 95       	dec	r22
 624:	e2 f7       	brpl	.-8      	; 0x61e <GPIO_setupPinDirection+0x72>
 626:	80 95       	com	r24
 628:	82 23       	and	r24, r18
 62a:	87 bb       	out	0x17, r24	; 23
 62c:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 62e:	41 30       	cpi	r20, 0x01	; 1
 630:	59 f4       	brne	.+22     	; 0x648 <GPIO_setupPinDirection+0x9c>
			{
				SET_BIT(DDRC,pin_num);
 632:	24 b3       	in	r18, 0x14	; 20
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <GPIO_setupPinDirection+0x92>
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	6a 95       	dec	r22
 640:	e2 f7       	brpl	.-8      	; 0x63a <GPIO_setupPinDirection+0x8e>
 642:	82 2b       	or	r24, r18
 644:	84 bb       	out	0x14, r24	; 20
 646:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 648:	24 b3       	in	r18, 0x14	; 20
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	02 c0       	rjmp	.+4      	; 0x654 <GPIO_setupPinDirection+0xa8>
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	6a 95       	dec	r22
 656:	e2 f7       	brpl	.-8      	; 0x650 <GPIO_setupPinDirection+0xa4>
 658:	80 95       	com	r24
 65a:	82 23       	and	r24, r18
 65c:	84 bb       	out	0x14, r24	; 20
 65e:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 660:	41 30       	cpi	r20, 0x01	; 1
 662:	59 f4       	brne	.+22     	; 0x67a <GPIO_setupPinDirection+0xce>
			{
				SET_BIT(DDRD,pin_num);
 664:	21 b3       	in	r18, 0x11	; 17
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	02 c0       	rjmp	.+4      	; 0x670 <GPIO_setupPinDirection+0xc4>
 66c:	88 0f       	add	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	6a 95       	dec	r22
 672:	e2 f7       	brpl	.-8      	; 0x66c <GPIO_setupPinDirection+0xc0>
 674:	82 2b       	or	r24, r18
 676:	81 bb       	out	0x11, r24	; 17
 678:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 67a:	21 b3       	in	r18, 0x11	; 17
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	02 c0       	rjmp	.+4      	; 0x686 <GPIO_setupPinDirection+0xda>
 682:	88 0f       	add	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	6a 95       	dec	r22
 688:	e2 f7       	brpl	.-8      	; 0x682 <GPIO_setupPinDirection+0xd6>
 68a:	80 95       	com	r24
 68c:	82 23       	and	r24, r18
 68e:	81 bb       	out	0x11, r24	; 17
 690:	08 95       	ret

Disassembly of section .text.GPIO_writePin:

00000692 <GPIO_writePin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 692:	68 30       	cpi	r22, 0x08	; 8
 694:	08 f0       	brcs	.+2      	; 0x698 <GPIO_writePin+0x6>
 696:	6f c0       	rjmp	.+222    	; 0x776 <GPIO_writePin+0xe4>
 698:	84 30       	cpi	r24, 0x04	; 4
 69a:	08 f0       	brcs	.+2      	; 0x69e <GPIO_writePin+0xc>
 69c:	6c c0       	rjmp	.+216    	; 0x776 <GPIO_writePin+0xe4>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
 69e:	81 30       	cpi	r24, 0x01	; 1
 6a0:	01 f1       	breq	.+64     	; 0x6e2 <GPIO_writePin+0x50>
 6a2:	30 f0       	brcs	.+12     	; 0x6b0 <GPIO_writePin+0x1e>
 6a4:	82 30       	cpi	r24, 0x02	; 2
 6a6:	b1 f1       	breq	.+108    	; 0x714 <GPIO_writePin+0x82>
 6a8:	83 30       	cpi	r24, 0x03	; 3
 6aa:	09 f4       	brne	.+2      	; 0x6ae <GPIO_writePin+0x1c>
 6ac:	4c c0       	rjmp	.+152    	; 0x746 <GPIO_writePin+0xb4>
 6ae:	08 95       	ret
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 6b0:	41 30       	cpi	r20, 0x01	; 1
 6b2:	59 f4       	brne	.+22     	; 0x6ca <GPIO_writePin+0x38>
			{
				SET_BIT(PORTA,pin_num);
 6b4:	2b b3       	in	r18, 0x1b	; 27
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <GPIO_writePin+0x2e>
 6bc:	88 0f       	add	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	6a 95       	dec	r22
 6c2:	e2 f7       	brpl	.-8      	; 0x6bc <GPIO_writePin+0x2a>
 6c4:	82 2b       	or	r24, r18
 6c6:	8b bb       	out	0x1b, r24	; 27
 6c8:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 6ca:	2b b3       	in	r18, 0x1b	; 27
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <GPIO_writePin+0x44>
 6d2:	88 0f       	add	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	6a 95       	dec	r22
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <GPIO_writePin+0x40>
 6da:	80 95       	com	r24
 6dc:	82 23       	and	r24, r18
 6de:	8b bb       	out	0x1b, r24	; 27
 6e0:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 6e2:	41 30       	cpi	r20, 0x01	; 1
 6e4:	59 f4       	brne	.+22     	; 0x6fc <GPIO_writePin+0x6a>
			{
				SET_BIT(PORTB,pin_num);
 6e6:	28 b3       	in	r18, 0x18	; 24
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <GPIO_writePin+0x60>
 6ee:	88 0f       	add	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	6a 95       	dec	r22
 6f4:	e2 f7       	brpl	.-8      	; 0x6ee <GPIO_writePin+0x5c>
 6f6:	82 2b       	or	r24, r18
 6f8:	88 bb       	out	0x18, r24	; 24
 6fa:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 6fc:	28 b3       	in	r18, 0x18	; 24
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <GPIO_writePin+0x76>
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	6a 95       	dec	r22
 70a:	e2 f7       	brpl	.-8      	; 0x704 <GPIO_writePin+0x72>
 70c:	80 95       	com	r24
 70e:	82 23       	and	r24, r18
 710:	88 bb       	out	0x18, r24	; 24
 712:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 714:	41 30       	cpi	r20, 0x01	; 1
 716:	59 f4       	brne	.+22     	; 0x72e <GPIO_writePin+0x9c>
			{
				SET_BIT(PORTC,pin_num);
 718:	25 b3       	in	r18, 0x15	; 21
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <GPIO_writePin+0x92>
 720:	88 0f       	add	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	6a 95       	dec	r22
 726:	e2 f7       	brpl	.-8      	; 0x720 <GPIO_writePin+0x8e>
 728:	82 2b       	or	r24, r18
 72a:	85 bb       	out	0x15, r24	; 21
 72c:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 72e:	25 b3       	in	r18, 0x15	; 21
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	02 c0       	rjmp	.+4      	; 0x73a <GPIO_writePin+0xa8>
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	6a 95       	dec	r22
 73c:	e2 f7       	brpl	.-8      	; 0x736 <GPIO_writePin+0xa4>
 73e:	80 95       	com	r24
 740:	82 23       	and	r24, r18
 742:	85 bb       	out	0x15, r24	; 21
 744:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 746:	41 30       	cpi	r20, 0x01	; 1
 748:	59 f4       	brne	.+22     	; 0x760 <GPIO_writePin+0xce>
			{
				SET_BIT(PORTD,pin_num);
 74a:	22 b3       	in	r18, 0x12	; 18
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	02 c0       	rjmp	.+4      	; 0x756 <GPIO_writePin+0xc4>
 752:	88 0f       	add	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	6a 95       	dec	r22
 758:	e2 f7       	brpl	.-8      	; 0x752 <GPIO_writePin+0xc0>
 75a:	82 2b       	or	r24, r18
 75c:	82 bb       	out	0x12, r24	; 18
 75e:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 760:	22 b3       	in	r18, 0x12	; 18
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	02 c0       	rjmp	.+4      	; 0x76c <GPIO_writePin+0xda>
 768:	88 0f       	add	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	6a 95       	dec	r22
 76e:	e2 f7       	brpl	.-8      	; 0x768 <GPIO_writePin+0xd6>
 770:	80 95       	com	r24
 772:	82 23       	and	r24, r18
 774:	82 bb       	out	0x12, r24	; 18
 776:	08 95       	ret

Disassembly of section .text.KeyPad_Init:

00000828 <KeyPad_Init>:


void KeyPad_Init(void)
{

	DIO_voidSetPinDirection(COLUMN_PORT, KEYPAD_COLUM_0, OUTPUT );
 828:	41 e0       	ldi	r20, 0x01	; 1
 82a:	60 e0       	ldi	r22, 0x00	; 0
 82c:	80 e0       	ldi	r24, 0x00	; 0
 82e:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(COLUMN_PORT, KEYPAD_COLUM_1, OUTPUT );
 832:	41 e0       	ldi	r20, 0x01	; 1
 834:	61 e0       	ldi	r22, 0x01	; 1
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(COLUMN_PORT, KEYPAD_COLUM_2, OUTPUT );
 83c:	41 e0       	ldi	r20, 0x01	; 1
 83e:	62 e0       	ldi	r22, 0x02	; 2
 840:	80 e0       	ldi	r24, 0x00	; 0
 842:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(COLUMN_PORT, KEYPAD_COLUM_3, OUTPUT );
 846:	41 e0       	ldi	r20, 0x01	; 1
 848:	63 e0       	ldi	r22, 0x03	; 3
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(COLUMN_PORT, KEYPAD_COLUM_0, HIGH);
 850:	41 e0       	ldi	r20, 0x01	; 1
 852:	60 e0       	ldi	r22, 0x00	; 0
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	0e 94 df 04 	call	0x9be	; 0x9be <DIO_voidSetPinValue>
	DIO_voidSetPinValue(COLUMN_PORT, KEYPAD_COLUM_1, HIGH);
 85a:	41 e0       	ldi	r20, 0x01	; 1
 85c:	61 e0       	ldi	r22, 0x01	; 1
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	0e 94 df 04 	call	0x9be	; 0x9be <DIO_voidSetPinValue>
	DIO_voidSetPinValue(COLUMN_PORT, KEYPAD_COLUM_2, HIGH);
 864:	41 e0       	ldi	r20, 0x01	; 1
 866:	62 e0       	ldi	r22, 0x02	; 2
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	0e 94 df 04 	call	0x9be	; 0x9be <DIO_voidSetPinValue>
	DIO_voidSetPinValue(COLUMN_PORT, KEYPAD_COLUM_3, HIGH);
 86e:	41 e0       	ldi	r20, 0x01	; 1
 870:	63 e0       	ldi	r22, 0x03	; 3
 872:	80 e0       	ldi	r24, 0x00	; 0
 874:	0e 94 df 04 	call	0x9be	; 0x9be <DIO_voidSetPinValue>

	DIO_voidSetPinDirection(ROW_PORT, KEYPAD_ROW_0, INPUT);
 878:	40 e0       	ldi	r20, 0x00	; 0
 87a:	64 e0       	ldi	r22, 0x04	; 4
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ROW_PORT, KEYPAD_ROW_1, INPUT);
 882:	40 e0       	ldi	r20, 0x00	; 0
 884:	65 e0       	ldi	r22, 0x05	; 5
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ROW_PORT, KEYPAD_ROW_2, INPUT);
 88c:	40 e0       	ldi	r20, 0x00	; 0
 88e:	66 e0       	ldi	r22, 0x06	; 6
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ROW_PORT, KEYPAD_ROW_3, INPUT);
 896:	40 e0       	ldi	r20, 0x00	; 0
 898:	67 e0       	ldi	r22, 0x07	; 7
 89a:	80 e0       	ldi	r24, 0x00	; 0
 89c:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_voidSetPinDirection>


	DIO_SetPullUpRes(ROW_PORT, KEYPAD_ROW_0);
 8a0:	64 e0       	ldi	r22, 0x04	; 4
 8a2:	70 e0       	ldi	r23, 0x00	; 0
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	0e 94 9d 05 	call	0xb3a	; 0xb3a <DIO_SetPullUpRes>
	DIO_SetPullUpRes(ROW_PORT, KEYPAD_ROW_1);
 8ac:	65 e0       	ldi	r22, 0x05	; 5
 8ae:	70 e0       	ldi	r23, 0x00	; 0
 8b0:	80 e0       	ldi	r24, 0x00	; 0
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	0e 94 9d 05 	call	0xb3a	; 0xb3a <DIO_SetPullUpRes>
	DIO_SetPullUpRes(ROW_PORT, KEYPAD_ROW_2);
 8b8:	66 e0       	ldi	r22, 0x06	; 6
 8ba:	70 e0       	ldi	r23, 0x00	; 0
 8bc:	80 e0       	ldi	r24, 0x00	; 0
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	0e 94 9d 05 	call	0xb3a	; 0xb3a <DIO_SetPullUpRes>
	DIO_SetPullUpRes(ROW_PORT, KEYPAD_ROW_3);
 8c4:	67 e0       	ldi	r22, 0x07	; 7
 8c6:	70 e0       	ldi	r23, 0x00	; 0
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 94 9d 05 	call	0xb3a	; 0xb3a <DIO_SetPullUpRes>
 8d0:	08 95       	ret

Disassembly of section .text.KeyPad_GetChar:

00000398 <KeyPad_GetChar>:


}

u8 KeyPad_GetChar(void)
{
 398:	9f 92       	push	r9
 39a:	af 92       	push	r10
 39c:	bf 92       	push	r11
 39e:	cf 92       	push	r12
 3a0:	df 92       	push	r13
 3a2:	ef 92       	push	r14
 3a4:	ff 92       	push	r15
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	28 97       	sbiw	r28, 0x08	; 8
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	f8 94       	cli
 3b8:	de bf       	out	0x3e, r29	; 62
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	cd bf       	out	0x3d, r28	; 61
	u8 COLUMNS[]={7,6,5,3};
 3be:	87 e0       	ldi	r24, 0x07	; 7
 3c0:	89 83       	std	Y+1, r24	; 0x01
 3c2:	86 e0       	ldi	r24, 0x06	; 6
 3c4:	8a 83       	std	Y+2, r24	; 0x02
 3c6:	95 e0       	ldi	r25, 0x05	; 5
 3c8:	9b 83       	std	Y+3, r25	; 0x03
 3ca:	83 e0       	ldi	r24, 0x03	; 3
 3cc:	8c 83       	std	Y+4, r24	; 0x04
	u8 ROWS[]={5,4,3,2};
 3ce:	9d 83       	std	Y+5, r25	; 0x05
 3d0:	94 e0       	ldi	r25, 0x04	; 4
 3d2:	9e 83       	std	Y+6, r25	; 0x06
 3d4:	8f 83       	std	Y+7, r24	; 0x07
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	88 87       	std	Y+8, r24	; 0x08
	u8 i  = 0;
	u8 j  = 0;

	u8 Temp , Value = ' ';
 3da:	68 94       	set
 3dc:	99 24       	eor	r9, r9
 3de:	95 f8       	bld	r9, 5

	for(i=0 ;i<4 ;i++ )//colunm
 3e0:	b1 2c       	mov	r11, r1
 3e2:	4c c0       	rjmp	.+152    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
	{
		DIO_voidSetPinValue(COLUMN_PORT, COLUMNS[i], LOW);
 3e4:	eb 2c       	mov	r14, r11
 3e6:	f1 2c       	mov	r15, r1
 3e8:	e1 e0       	ldi	r30, 0x01	; 1
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	ec 0f       	add	r30, r28
 3ee:	fd 1f       	adc	r31, r29
 3f0:	ee 0d       	add	r30, r14
 3f2:	ff 1d       	adc	r31, r15
 3f4:	a0 80       	ld	r10, Z
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	6a 2d       	mov	r22, r10
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	0e 94 df 04 	call	0x9be	; 0x9be <DIO_voidSetPinValue>

		for(j=0 ;j<4 ;j++) //rows
 400:	00 e0       	ldi	r16, 0x00	; 0
 402:	34 c0       	rjmp	.+104    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
		{
			Temp = DIO_u8GetPinValue(ROW_PORT, ROWS[j]);
 404:	c0 2e       	mov	r12, r16
 406:	d1 2c       	mov	r13, r1
 408:	e5 e0       	ldi	r30, 0x05	; 5
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	ec 0f       	add	r30, r28
 40e:	fd 1f       	adc	r31, r29
 410:	ec 0d       	add	r30, r12
 412:	fd 1d       	adc	r31, r13
 414:	10 81       	ld	r17, Z
 416:	61 2f       	mov	r22, r17
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_u8GetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41e:	e1 ee       	ldi	r30, 0xE1	; 225
 420:	f4 e0       	ldi	r31, 0x04	; 4
 422:	31 97       	sbiw	r30, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 428:	00 00       	nop
			_delay_ms(5);
			
			if(Temp==0)
 42a:	81 11       	cpse	r24, r1
 42c:	1c c0       	rjmp	.+56     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 42e:	e1 ee       	ldi	r30, 0xE1	; 225
 430:	f4 e0       	ldi	r31, 0x04	; 4
 432:	31 97       	sbiw	r30, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 438:	00 00       	nop
			{
				_delay_ms(5);
				Value = KeyPad_Values[i][j];
 43a:	97 01       	movw	r18, r14
 43c:	22 0f       	add	r18, r18
 43e:	33 1f       	adc	r19, r19
 440:	22 0f       	add	r18, r18
 442:	33 1f       	adc	r19, r19
 444:	2c 0d       	add	r18, r12
 446:	3d 1d       	adc	r19, r13
 448:	03 2e       	mov	r0, r19
 44a:	00 0c       	add	r0, r0
 44c:	44 0b       	sbc	r20, r20
 44e:	2d 50       	subi	r18, 0x0D	; 13
 450:	3f 4f       	sbci	r19, 0xFF	; 255
 452:	4f 4f       	sbci	r20, 0xFF	; 255
 454:	f9 01       	movw	r30, r18
 456:	94 90       	lpm	r9, Z
 458:	47 fd       	sbrc	r20, 7
 45a:	90 80       	ld	r9, Z
 45c:	04 c0       	rjmp	.+8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
			}
			while(Temp==0)
			{
				Temp = DIO_u8GetPinValue(ROW_PORT, ROWS[j]);
 45e:	61 2f       	mov	r22, r17
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_u8GetPinValue>
			if(Temp==0)
			{
				_delay_ms(5);
				Value = KeyPad_Values[i][j];
			}
			while(Temp==0)
 466:	88 23       	and	r24, r24
 468:	d1 f3       	breq	.-12     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>

	for(i=0 ;i<4 ;i++ )//colunm
	{
		DIO_voidSetPinValue(COLUMN_PORT, COLUMNS[i], LOW);

		for(j=0 ;j<4 ;j++) //rows
 46a:	0f 5f       	subi	r16, 0xFF	; 255
 46c:	04 30       	cpi	r16, 0x04	; 4
 46e:	50 f2       	brcs	.-108    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
			{
				Temp = DIO_u8GetPinValue(ROW_PORT, ROWS[j]);
			}

		}
		DIO_voidSetPinValue(COLUMN_PORT, COLUMNS[i], HIGH);
 470:	41 e0       	ldi	r20, 0x01	; 1
 472:	6a 2d       	mov	r22, r10
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	0e 94 df 04 	call	0x9be	; 0x9be <DIO_voidSetPinValue>
	u8 i  = 0;
	u8 j  = 0;

	u8 Temp , Value = ' ';

	for(i=0 ;i<4 ;i++ )//colunm
 47a:	b3 94       	inc	r11
 47c:	f3 e0       	ldi	r31, 0x03	; 3
 47e:	fb 15       	cp	r31, r11
 480:	08 f0       	brcs	.+2      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 482:	b0 cf       	rjmp	.-160    	; 0x3e4 <KeyPad_GetChar+0x4c>
		DIO_voidSetPinValue(COLUMN_PORT, COLUMNS[i], HIGH);
	}
	return Value;


}
 484:	89 2d       	mov	r24, r9
 486:	28 96       	adiw	r28, 0x08	; 8
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	f8 94       	cli
 48c:	de bf       	out	0x3e, r29	; 62
 48e:	0f be       	out	0x3f, r0	; 63
 490:	cd bf       	out	0x3d, r28	; 61
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	1f 91       	pop	r17
 498:	0f 91       	pop	r16
 49a:	ff 90       	pop	r15
 49c:	ef 90       	pop	r14
 49e:	df 90       	pop	r13
 4a0:	cf 90       	pop	r12
 4a2:	bf 90       	pop	r11
 4a4:	af 90       	pop	r10
 4a6:	9f 90       	pop	r9
 4a8:	08 95       	ret

Disassembly of section .text.LCD_sendCommand:

00000104 <LCD_sendCommand>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
	LCD_moveCursor(row,col); /* go to to the required LCD position */
	LCD_displayString(Str); /* display the string */
}
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 112:	89 ef       	ldi	r24, 0xF9	; 249
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_sendCommand+0x12>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_sendCommand+0x18>
 11c:	00 00       	nop
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	62 e0       	ldi	r22, 0x02	; 2
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 128:	89 ef       	ldi	r24, 0xF9	; 249
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_sendCommand+0x28>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_sendCommand+0x2e>
 132:	00 00       	nop
 134:	4c 2f       	mov	r20, r28
 136:	40 71       	andi	r20, 0x10	; 16
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	55 95       	asr	r21
 13c:	47 95       	ror	r20
 13e:	55 95       	asr	r21
 140:	47 95       	ror	r20
 142:	55 95       	asr	r21
 144:	47 95       	ror	r20
 146:	55 95       	asr	r21
 148:	47 95       	ror	r20
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 152:	4c 2f       	mov	r20, r28
 154:	40 72       	andi	r20, 0x20	; 32
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	55 95       	asr	r21
 15a:	47 95       	ror	r20
 15c:	55 95       	asr	r21
 15e:	47 95       	ror	r20
 160:	55 95       	asr	r21
 162:	47 95       	ror	r20
 164:	55 95       	asr	r21
 166:	47 95       	ror	r20
 168:	55 95       	asr	r21
 16a:	47 95       	ror	r20
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 174:	4c 2f       	mov	r20, r28
 176:	40 74       	andi	r20, 0x40	; 64
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	04 2e       	mov	r0, r20
 17c:	45 2f       	mov	r20, r21
 17e:	00 0c       	add	r0, r0
 180:	44 1f       	adc	r20, r20
 182:	55 0b       	sbc	r21, r21
 184:	00 0c       	add	r0, r0
 186:	44 1f       	adc	r20, r20
 188:	55 1f       	adc	r21, r21
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 192:	4c 2f       	mov	r20, r28
 194:	44 1f       	adc	r20, r20
 196:	44 27       	eor	r20, r20
 198:	44 1f       	adc	r20, r20
 19a:	63 e0       	ldi	r22, 0x03	; 3
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 1a2:	89 ef       	ldi	r24, 0xF9	; 249
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_sendCommand+0xa2>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_sendCommand+0xa8>
 1ac:	00 00       	nop
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	62 e0       	ldi	r22, 0x02	; 2
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 1b8:	89 ef       	ldi	r24, 0xF9	; 249
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_sendCommand+0xb8>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_sendCommand+0xbe>
 1c2:	00 00       	nop
 1c4:	41 e0       	ldi	r20, 0x01	; 1
 1c6:	62 e0       	ldi	r22, 0x02	; 2
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 1ce:	89 ef       	ldi	r24, 0xF9	; 249
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD_sendCommand+0xce>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCD_sendCommand+0xd4>
 1d8:	00 00       	nop
 1da:	4c 2f       	mov	r20, r28
 1dc:	41 70       	andi	r20, 0x01	; 1
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 1e6:	4c 2f       	mov	r20, r28
 1e8:	42 70       	andi	r20, 0x02	; 2
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	55 95       	asr	r21
 1ee:	47 95       	ror	r20
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 1f8:	4c 2f       	mov	r20, r28
 1fa:	44 70       	andi	r20, 0x04	; 4
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	55 95       	asr	r21
 200:	47 95       	ror	r20
 202:	55 95       	asr	r21
 204:	47 95       	ror	r20
 206:	62 e0       	ldi	r22, 0x02	; 2
 208:	83 e0       	ldi	r24, 0x03	; 3
 20a:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 20e:	c8 70       	andi	r28, 0x08	; 8
 210:	4c 2f       	mov	r20, r28
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	55 95       	asr	r21
 216:	47 95       	ror	r20
 218:	55 95       	asr	r21
 21a:	47 95       	ror	r20
 21c:	55 95       	asr	r21
 21e:	47 95       	ror	r20
 220:	63 e0       	ldi	r22, 0x03	; 3
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 228:	89 ef       	ldi	r24, 0xF9	; 249
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <LCD_sendCommand+0x128>
 230:	00 c0       	rjmp	.+0      	; 0x232 <LCD_sendCommand+0x12e>
 232:	00 00       	nop
 234:	40 e0       	ldi	r20, 0x00	; 0
 236:	62 e0       	ldi	r22, 0x02	; 2
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 23e:	89 ef       	ldi	r24, 0xF9	; 249
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <LCD_sendCommand+0x13e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <LCD_sendCommand+0x144>
 248:	00 00       	nop
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

Disassembly of section .text.LCD_init:

000008d2 <LCD_init>:
 8d2:	41 e0       	ldi	r20, 0x01	; 1
 8d4:	61 e0       	ldi	r22, 0x01	; 1
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <GPIO_setupPinDirection>
 8dc:	41 e0       	ldi	r20, 0x01	; 1
 8de:	62 e0       	ldi	r22, 0x02	; 2
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <GPIO_setupPinDirection>
 8e6:	87 e8       	ldi	r24, 0x87	; 135
 8e8:	93 e1       	ldi	r25, 0x13	; 19
 8ea:	01 97       	sbiw	r24, 0x01	; 1
 8ec:	f1 f7       	brne	.-4      	; 0x8ea <LCD_init+0x18>
 8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <LCD_init+0x1e>
 8f0:	00 00       	nop
 8f2:	41 e0       	ldi	r20, 0x01	; 1
 8f4:	60 e0       	ldi	r22, 0x00	; 0
 8f6:	83 e0       	ldi	r24, 0x03	; 3
 8f8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <GPIO_setupPinDirection>
 8fc:	41 e0       	ldi	r20, 0x01	; 1
 8fe:	61 e0       	ldi	r22, 0x01	; 1
 900:	83 e0       	ldi	r24, 0x03	; 3
 902:	0e 94 d6 02 	call	0x5ac	; 0x5ac <GPIO_setupPinDirection>
 906:	41 e0       	ldi	r20, 0x01	; 1
 908:	62 e0       	ldi	r22, 0x02	; 2
 90a:	83 e0       	ldi	r24, 0x03	; 3
 90c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <GPIO_setupPinDirection>
 910:	41 e0       	ldi	r20, 0x01	; 1
 912:	63 e0       	ldi	r22, 0x03	; 3
 914:	83 e0       	ldi	r24, 0x03	; 3
 916:	0e 94 d6 02 	call	0x5ac	; 0x5ac <GPIO_setupPinDirection>
 91a:	83 e3       	ldi	r24, 0x33	; 51
 91c:	0e 94 82 00 	call	0x104	; 0x104 <LCD_sendCommand>
 920:	82 e3       	ldi	r24, 0x32	; 50
 922:	0e 94 82 00 	call	0x104	; 0x104 <LCD_sendCommand>
 926:	88 e2       	ldi	r24, 0x28	; 40
 928:	0e 94 82 00 	call	0x104	; 0x104 <LCD_sendCommand>
 92c:	8c e0       	ldi	r24, 0x0C	; 12
 92e:	0e 94 82 00 	call	0x104	; 0x104 <LCD_sendCommand>
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	0e 94 82 00 	call	0x104	; 0x104 <LCD_sendCommand>
 938:	08 95       	ret

Disassembly of section .text.LCD_displayCharacter:

0000024e <LCD_displayCharacter>:
 24e:	cf 93       	push	r28
 250:	c8 2f       	mov	r28, r24
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 25c:	89 ef       	ldi	r24, 0xF9	; 249
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <LCD_displayCharacter+0x12>
 264:	00 c0       	rjmp	.+0      	; 0x266 <LCD_displayCharacter+0x18>
 266:	00 00       	nop
 268:	41 e0       	ldi	r20, 0x01	; 1
 26a:	62 e0       	ldi	r22, 0x02	; 2
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 272:	89 ef       	ldi	r24, 0xF9	; 249
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD_displayCharacter+0x28>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_displayCharacter+0x2e>
 27c:	00 00       	nop
 27e:	4c 2f       	mov	r20, r28
 280:	40 71       	andi	r20, 0x10	; 16
 282:	50 e0       	ldi	r21, 0x00	; 0
 284:	55 95       	asr	r21
 286:	47 95       	ror	r20
 288:	55 95       	asr	r21
 28a:	47 95       	ror	r20
 28c:	55 95       	asr	r21
 28e:	47 95       	ror	r20
 290:	55 95       	asr	r21
 292:	47 95       	ror	r20
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	83 e0       	ldi	r24, 0x03	; 3
 298:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 29c:	4c 2f       	mov	r20, r28
 29e:	40 72       	andi	r20, 0x20	; 32
 2a0:	50 e0       	ldi	r21, 0x00	; 0
 2a2:	55 95       	asr	r21
 2a4:	47 95       	ror	r20
 2a6:	55 95       	asr	r21
 2a8:	47 95       	ror	r20
 2aa:	55 95       	asr	r21
 2ac:	47 95       	ror	r20
 2ae:	55 95       	asr	r21
 2b0:	47 95       	ror	r20
 2b2:	55 95       	asr	r21
 2b4:	47 95       	ror	r20
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	83 e0       	ldi	r24, 0x03	; 3
 2ba:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 2be:	4c 2f       	mov	r20, r28
 2c0:	40 74       	andi	r20, 0x40	; 64
 2c2:	50 e0       	ldi	r21, 0x00	; 0
 2c4:	04 2e       	mov	r0, r20
 2c6:	45 2f       	mov	r20, r21
 2c8:	00 0c       	add	r0, r0
 2ca:	44 1f       	adc	r20, r20
 2cc:	55 0b       	sbc	r21, r21
 2ce:	00 0c       	add	r0, r0
 2d0:	44 1f       	adc	r20, r20
 2d2:	55 1f       	adc	r21, r21
 2d4:	62 e0       	ldi	r22, 0x02	; 2
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 2dc:	4c 2f       	mov	r20, r28
 2de:	44 1f       	adc	r20, r20
 2e0:	44 27       	eor	r20, r20
 2e2:	44 1f       	adc	r20, r20
 2e4:	63 e0       	ldi	r22, 0x03	; 3
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 2ec:	89 ef       	ldi	r24, 0xF9	; 249
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCD_displayCharacter+0xa2>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <LCD_displayCharacter+0xa8>
 2f6:	00 00       	nop
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	62 e0       	ldi	r22, 0x02	; 2
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 302:	89 ef       	ldi	r24, 0xF9	; 249
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <LCD_displayCharacter+0xb8>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_displayCharacter+0xbe>
 30c:	00 00       	nop
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	62 e0       	ldi	r22, 0x02	; 2
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 318:	89 ef       	ldi	r24, 0xF9	; 249
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <LCD_displayCharacter+0xce>
 320:	00 c0       	rjmp	.+0      	; 0x322 <LCD_displayCharacter+0xd4>
 322:	00 00       	nop
 324:	4c 2f       	mov	r20, r28
 326:	41 70       	andi	r20, 0x01	; 1
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 330:	4c 2f       	mov	r20, r28
 332:	42 70       	andi	r20, 0x02	; 2
 334:	50 e0       	ldi	r21, 0x00	; 0
 336:	55 95       	asr	r21
 338:	47 95       	ror	r20
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 342:	4c 2f       	mov	r20, r28
 344:	44 70       	andi	r20, 0x04	; 4
 346:	50 e0       	ldi	r21, 0x00	; 0
 348:	55 95       	asr	r21
 34a:	47 95       	ror	r20
 34c:	55 95       	asr	r21
 34e:	47 95       	ror	r20
 350:	62 e0       	ldi	r22, 0x02	; 2
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 358:	c8 70       	andi	r28, 0x08	; 8
 35a:	4c 2f       	mov	r20, r28
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	55 95       	asr	r21
 360:	47 95       	ror	r20
 362:	55 95       	asr	r21
 364:	47 95       	ror	r20
 366:	55 95       	asr	r21
 368:	47 95       	ror	r20
 36a:	63 e0       	ldi	r22, 0x03	; 3
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 372:	89 ef       	ldi	r24, 0xF9	; 249
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <LCD_displayCharacter+0x128>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <LCD_displayCharacter+0x12e>
 37c:	00 00       	nop
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	62 e0       	ldi	r22, 0x02	; 2
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_writePin>
 388:	89 ef       	ldi	r24, 0xF9	; 249
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <LCD_displayCharacter+0x13e>
 390:	00 c0       	rjmp	.+0      	; 0x392 <LCD_displayCharacter+0x144>
 392:	00 00       	nop
 394:	cf 91       	pop	r28
 396:	08 95       	ret

Disassembly of section .text.LCD_displayString:

000009fc <LCD_displayString>:
 9fc:	cf 92       	push	r12
 9fe:	df 92       	push	r13
 a00:	ef 92       	push	r14
 a02:	cf 93       	push	r28
 a04:	6b 01       	movw	r12, r22
 a06:	e8 2e       	mov	r14, r24
 a08:	c0 e0       	ldi	r28, 0x00	; 0
 a0a:	03 c0       	rjmp	.+6      	; 0xa12 <LCD_displayString+0x16>
 a0c:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_displayCharacter>
 a10:	cf 5f       	subi	r28, 0xFF	; 255
 a12:	ae 2d       	mov	r26, r14
 a14:	c6 01       	movw	r24, r12
 a16:	8c 0f       	add	r24, r28
 a18:	91 1d       	adc	r25, r1
 a1a:	a1 1d       	adc	r26, r1
 a1c:	fc 01       	movw	r30, r24
 a1e:	84 91       	lpm	r24, Z
 a20:	a7 fd       	sbrc	r26, 7
 a22:	80 81       	ld	r24, Z
 a24:	81 11       	cpse	r24, r1
 a26:	f2 cf       	rjmp	.-28     	; 0xa0c <LCD_displayString+0x10>
 a28:	cf 91       	pop	r28
 a2a:	ef 90       	pop	r14
 a2c:	df 90       	pop	r13
 a2e:	cf 90       	pop	r12
 a30:	08 95       	ret

Disassembly of section .text.LCD_moveCursor:

00000a64 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 col)
{
	uint8 lcd_memory_address;
	
	switch(row)
 a64:	81 30       	cpi	r24, 0x01	; 1
 a66:	31 f0       	breq	.+12     	; 0xa74 <LCD_moveCursor+0x10>
 a68:	70 f0       	brcs	.+28     	; 0xa86 <LCD_moveCursor+0x22>
 a6a:	82 30       	cpi	r24, 0x02	; 2
 a6c:	31 f0       	breq	.+12     	; 0xa7a <LCD_moveCursor+0x16>
 a6e:	83 30       	cpi	r24, 0x03	; 3
 a70:	39 f0       	breq	.+14     	; 0xa80 <LCD_moveCursor+0x1c>
 a72:	0a c0       	rjmp	.+20     	; 0xa88 <LCD_moveCursor+0x24>
	{
		case 0:
		lcd_memory_address=col;
		break;
		case 1:
		lcd_memory_address=col+0x40;
 a74:	90 e4       	ldi	r25, 0x40	; 64
 a76:	96 0f       	add	r25, r22
		break;
 a78:	07 c0       	rjmp	.+14     	; 0xa88 <LCD_moveCursor+0x24>
		case 2:
		lcd_memory_address=col+0x10;
 a7a:	90 e1       	ldi	r25, 0x10	; 16
 a7c:	96 0f       	add	r25, r22
		break;
 a7e:	04 c0       	rjmp	.+8      	; 0xa88 <LCD_moveCursor+0x24>
		case 3:
		lcd_memory_address=col+0x50;
 a80:	90 e5       	ldi	r25, 0x50	; 80
 a82:	96 0f       	add	r25, r22
		break;
 a84:	01 c0       	rjmp	.+2      	; 0xa88 <LCD_moveCursor+0x24>
	uint8 lcd_memory_address;
	
	switch(row)
	{
		case 0:
		lcd_memory_address=col;
 a86:	96 2f       	mov	r25, r22
		case 3:
		lcd_memory_address=col+0x50;
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
 a88:	89 2f       	mov	r24, r25
 a8a:	80 68       	ori	r24, 0x80	; 128
 a8c:	0e 94 82 00 	call	0x104	; 0x104 <LCD_sendCommand>
 a90:	08 95       	ret

Disassembly of section .text.strrev:

00000a32 <strrev>:
	LCD_displayString(Str); /* display the string */
}



void strrev(char* str) {
 a32:	cf 93       	push	r28
 a34:	df 93       	push	r29
 a36:	ec 01       	movw	r28, r24
	char* end = str + strlen(str) - 1;
 a38:	bc 01       	movw	r22, r24
 a3a:	80 e8       	ldi	r24, 0x80	; 128
 a3c:	0e 94 5f 05 	call	0xabe	; 0xabe <strlen>
 a40:	01 97       	sbiw	r24, 0x01	; 1
 a42:	fe 01       	movw	r30, r28
 a44:	e8 0f       	add	r30, r24
 a46:	f9 1f       	adc	r31, r25
	char tmp;
	
	while (end > str) {
 a48:	07 c0       	rjmp	.+14     	; 0xa58 <strrev+0x26>
		tmp = *str;
 a4a:	de 01       	movw	r26, r28
 a4c:	8d 91       	ld	r24, X+
		*str++ = *end;
 a4e:	90 81       	ld	r25, Z
 a50:	98 83       	st	Y, r25
		*end-- = tmp;
 a52:	80 83       	st	Z, r24
 a54:	31 97       	sbiw	r30, 0x01	; 1
	char* end = str + strlen(str) - 1;
	char tmp;
	
	while (end > str) {
		tmp = *str;
		*str++ = *end;
 a56:	ed 01       	movw	r28, r26

void strrev(char* str) {
	char* end = str + strlen(str) - 1;
	char tmp;
	
	while (end > str) {
 a58:	ce 17       	cp	r28, r30
 a5a:	df 07       	cpc	r29, r31
 a5c:	b0 f3       	brcs	.-20     	; 0xa4a <strrev+0x18>
		tmp = *str;
		*str++ = *end;
		*end-- = tmp;
	}
}
 a5e:	df 91       	pop	r29
 a60:	cf 91       	pop	r28
 a62:	08 95       	ret

Disassembly of section .text.itoa:

00000778 <itoa>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
	LCD_moveCursor(row,col); /* go to to the required LCD position */
	LCD_displayString(Str); /* display the string */
}
 778:	8f 92       	push	r8
 77a:	9f 92       	push	r9
 77c:	af 92       	push	r10
 77e:	bf 92       	push	r11
 780:	cf 92       	push	r12
 782:	df 92       	push	r13
 784:	ef 92       	push	r14
 786:	ff 92       	push	r15
 788:	0f 93       	push	r16
 78a:	1f 93       	push	r17
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	fc 01       	movw	r30, r24
 792:	5b 01       	movw	r10, r22
 794:	7a 01       	movw	r14, r20
 796:	99 23       	and	r25, r25
 798:	24 f4       	brge	.+8      	; 0x7a2 <itoa+0x2a>
 79a:	88 24       	eor	r8, r8
 79c:	8a 94       	dec	r8
 79e:	98 2c       	mov	r9, r8
 7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <itoa+0x30>
 7a2:	88 24       	eor	r8, r8
 7a4:	83 94       	inc	r8
 7a6:	91 2c       	mov	r9, r1
 7a8:	c0 e0       	ldi	r28, 0x00	; 0
 7aa:	d0 e0       	ldi	r29, 0x00	; 0
 7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <itoa+0x38>
 7ae:	e8 01       	movw	r28, r16
 7b0:	8e 01       	movw	r16, r28
 7b2:	0f 5f       	subi	r16, 0xFF	; 255
 7b4:	1f 4f       	sbci	r17, 0xFF	; 255
 7b6:	65 01       	movw	r12, r10
 7b8:	cc 0e       	add	r12, r28
 7ba:	dd 1e       	adc	r13, r29
 7bc:	cf 01       	movw	r24, r30
 7be:	b7 01       	movw	r22, r14
 7c0:	0e 94 75 05 	call	0xaea	; 0xaea <__divmodhi4>
 7c4:	9c 01       	movw	r18, r24
 7c6:	99 23       	and	r25, r25
 7c8:	24 f4       	brge	.+8      	; 0x7d2 <itoa+0x5a>
 7ca:	22 27       	eor	r18, r18
 7cc:	33 27       	eor	r19, r19
 7ce:	28 1b       	sub	r18, r24
 7d0:	39 0b       	sbc	r19, r25
 7d2:	d9 01       	movw	r26, r18
 7d4:	a0 5a       	subi	r26, 0xA0	; 160
 7d6:	bf 4f       	sbci	r27, 0xFF	; 255
 7d8:	8c 91       	ld	r24, X
 7da:	d6 01       	movw	r26, r12
 7dc:	8c 93       	st	X, r24
 7de:	cf 01       	movw	r24, r30
 7e0:	b7 01       	movw	r22, r14
 7e2:	0e 94 75 05 	call	0xaea	; 0xaea <__divmodhi4>
 7e6:	fb 01       	movw	r30, r22
 7e8:	30 97       	sbiw	r30, 0x00	; 0
 7ea:	09 f7       	brne	.-62     	; 0x7ae <itoa+0x36>
 7ec:	99 20       	and	r9, r9
 7ee:	44 f4       	brge	.+16     	; 0x800 <__DATA_REGION_LENGTH__>
 7f0:	f5 01       	movw	r30, r10
 7f2:	e0 0f       	add	r30, r16
 7f4:	f1 1f       	adc	r31, r17
 7f6:	8d e2       	ldi	r24, 0x2D	; 45
 7f8:	80 83       	st	Z, r24
 7fa:	8e 01       	movw	r16, r28
 7fc:	0e 5f       	subi	r16, 0xFE	; 254
 7fe:	1f 4f       	sbci	r17, 0xFF	; 255
 800:	f5 01       	movw	r30, r10
 802:	e0 0f       	add	r30, r16
 804:	f1 1f       	adc	r31, r17
 806:	10 82       	st	Z, r1
 808:	c5 01       	movw	r24, r10
 80a:	0e 94 19 05 	call	0xa32	; 0xa32 <strrev>
 80e:	df 91       	pop	r29
 810:	cf 91       	pop	r28
 812:	1f 91       	pop	r17
 814:	0f 91       	pop	r16
 816:	ff 90       	pop	r15
 818:	ef 90       	pop	r14
 81a:	df 90       	pop	r13
 81c:	cf 90       	pop	r12
 81e:	bf 90       	pop	r11
 820:	af 90       	pop	r10
 822:	9f 90       	pop	r9
 824:	8f 90       	pop	r8
 826:	08 95       	ret

Disassembly of section .text.LCD_intgerToString:

0000093a <LCD_intgerToString>:
 93a:	0f 93       	push	r16
 93c:	1f 93       	push	r17
 93e:	cf 93       	push	r28
 940:	df 93       	push	r29
 942:	cd b7       	in	r28, 0x3d	; 61
 944:	de b7       	in	r29, 0x3e	; 62
 946:	60 97       	sbiw	r28, 0x10	; 16
 948:	0f b6       	in	r0, 0x3f	; 63
 94a:	f8 94       	cli
 94c:	de bf       	out	0x3e, r29	; 62
 94e:	0f be       	out	0x3f, r0	; 63
 950:	cd bf       	out	0x3d, r28	; 61
 952:	4a e0       	ldi	r20, 0x0A	; 10
 954:	50 e0       	ldi	r21, 0x00	; 0
 956:	8e 01       	movw	r16, r28
 958:	0f 5f       	subi	r16, 0xFF	; 255
 95a:	1f 4f       	sbci	r17, 0xFF	; 255
 95c:	b8 01       	movw	r22, r16
 95e:	0e 94 bc 03 	call	0x778	; 0x778 <itoa>
 962:	b8 01       	movw	r22, r16
 964:	80 e8       	ldi	r24, 0x80	; 128
 966:	0e 94 fe 04 	call	0x9fc	; 0x9fc <LCD_displayString>
 96a:	60 96       	adiw	r28, 0x10	; 16
 96c:	0f b6       	in	r0, 0x3f	; 63
 96e:	f8 94       	cli
 970:	de bf       	out	0x3e, r29	; 62
 972:	0f be       	out	0x3f, r0	; 63
 974:	cd bf       	out	0x3d, r28	; 61
 976:	df 91       	pop	r29
 978:	cf 91       	pop	r28
 97a:	1f 91       	pop	r17
 97c:	0f 91       	pop	r16
 97e:	08 95       	ret

Disassembly of section .text.main:

000004aa <main>:


#include <util/delay.h> 

int main(void)
{
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
	unsigned char key,key1,key2,result;
	LCD_init();
 4ae:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_init>
	KeyPad_Init();
 4b2:	0e 94 14 04 	call	0x828	; 0x828 <KeyPad_Init>


	LCD_moveCursor(0,0); 
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	0e 94 32 05 	call	0xa64	; 0xa64 <LCD_moveCursor>
	
	key = KeyPad_GetChar();
 4be:	0e 94 cc 01 	call	0x398	; 0x398 <KeyPad_GetChar>

	
		LCD_intgerToString(key);
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_intgerToString>
 4c8:	87 ea       	ldi	r24, 0xA7	; 167
 4ca:	91 e6       	ldi	r25, 0x61	; 97
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <main+0x22>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <main+0x28>
 4d2:	00 00       	nop
	while(1)
	{
		
		

			LCD_displayString(" +, -, *, /):");
 4d4:	60 eb       	ldi	r22, 0xB0	; 176
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	0e 94 fe 04 	call	0x9fc	; 0x9fc <LCD_displayString>
			key = KeyPad_GetChar();
 4de:	0e 94 cc 01 	call	0x398	; 0x398 <KeyPad_GetChar>
 4e2:	c8 2f       	mov	r28, r24
 4e4:	87 ea       	ldi	r24, 0xA7	; 167
 4e6:	91 e6       	ldi	r25, 0x61	; 97
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <main+0x3e>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <main+0x44>
 4ee:	00 00       	nop
			_delay_ms(100);
			
			LCD_displayString(" Enter two operands: ");
 4f0:	6e eb       	ldi	r22, 0xBE	; 190
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	0e 94 fe 04 	call	0x9fc	; 0x9fc <LCD_displayString>
			key1 = KeyPad_GetChar();
 4fa:	0e 94 cc 01 	call	0x398	; 0x398 <KeyPad_GetChar>
 4fe:	d8 2f       	mov	r29, r24
			key2 = KeyPad_GetChar();
 500:	0e 94 cc 01 	call	0x398	; 0x398 <KeyPad_GetChar>
 504:	68 2f       	mov	r22, r24
 506:	87 ea       	ldi	r24, 0xA7	; 167
 508:	91 e6       	ldi	r25, 0x61	; 97
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <main+0x60>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <main+0x66>
 510:	00 00       	nop
          _delay_ms(100);
			switch (key) {
 512:	cb 32       	cpi	r28, 0x2B	; 43
 514:	49 f0       	breq	.+18     	; 0x528 <main+0x7e>
 516:	18 f4       	brcc	.+6      	; 0x51e <main+0x74>
 518:	ca 32       	cpi	r28, 0x2A	; 42
 51a:	f1 f0       	breq	.+60     	; 0x558 <main+0xae>
 51c:	37 c0       	rjmp	.+110    	; 0x58c <main+0xe2>
 51e:	cd 32       	cpi	r28, 0x2D	; 45
 520:	79 f0       	breq	.+30     	; 0x540 <main+0x96>
 522:	cf 32       	cpi	r28, 0x2F	; 47
 524:	31 f1       	breq	.+76     	; 0x572 <main+0xc8>
 526:	32 c0       	rjmp	.+100    	; 0x58c <main+0xe2>
				case '+':
				result=  key1 + key2;
 528:	8d 2f       	mov	r24, r29
 52a:	86 0f       	add	r24, r22
				LCD_intgerToString(result);
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_intgerToString>
 532:	87 ea       	ldi	r24, 0xA7	; 167
 534:	91 e6       	ldi	r25, 0x61	; 97
 536:	01 97       	sbiw	r24, 0x01	; 1
 538:	f1 f7       	brne	.-4      	; 0x536 <main+0x8c>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <main+0x92>
 53c:	00 00       	nop
 53e:	31 c0       	rjmp	.+98     	; 0x5a2 <main+0xf8>
				_delay_ms(100);
				break;
				case '-':
				result= key1 - key2;
 540:	8d 2f       	mov	r24, r29
 542:	86 1b       	sub	r24, r22
				LCD_intgerToString(result);
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_intgerToString>
 54a:	87 ea       	ldi	r24, 0xA7	; 167
 54c:	91 e6       	ldi	r25, 0x61	; 97
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <main+0xa4>
 552:	00 c0       	rjmp	.+0      	; 0x554 <main+0xaa>
 554:	00 00       	nop
 556:	25 c0       	rjmp	.+74     	; 0x5a2 <main+0xf8>
				_delay_ms(100);
				break;
				case '*':
				result= key1 * key2;
 558:	d6 9f       	mul	r29, r22
 55a:	80 2d       	mov	r24, r0
 55c:	11 24       	eor	r1, r1
				LCD_intgerToString(result);
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_intgerToString>
 564:	87 ea       	ldi	r24, 0xA7	; 167
 566:	91 e6       	ldi	r25, 0x61	; 97
 568:	01 97       	sbiw	r24, 0x01	; 1
 56a:	f1 f7       	brne	.-4      	; 0x568 <main+0xbe>
 56c:	00 c0       	rjmp	.+0      	; 0x56e <main+0xc4>
 56e:	00 00       	nop
 570:	18 c0       	rjmp	.+48     	; 0x5a2 <main+0xf8>
				_delay_ms(100);
				break;
				case '/':
			
				result= key1 / key2;
 572:	8d 2f       	mov	r24, r29
 574:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__udivmodqi4>
				LCD_intgerToString(result);
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_intgerToString>
 57e:	87 ea       	ldi	r24, 0xA7	; 167
 580:	91 e6       	ldi	r25, 0x61	; 97
 582:	01 97       	sbiw	r24, 0x01	; 1
 584:	f1 f7       	brne	.-4      	; 0x582 <main+0xd8>
 586:	00 c0       	rjmp	.+0      	; 0x588 <main+0xde>
 588:	00 00       	nop
 58a:	0b c0       	rjmp	.+22     	; 0x5a2 <main+0xf8>
				_delay_ms(100);
				break;
				// operator doesn't match any case constant
				default:
				LCD_displayString("Error! operator is not correct");
 58c:	64 ed       	ldi	r22, 0xD4	; 212
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	0e 94 fe 04 	call	0x9fc	; 0x9fc <LCD_displayString>
 596:	87 ea       	ldi	r24, 0xA7	; 167
 598:	91 e6       	ldi	r25, 0x61	; 97
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <main+0xf0>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <main+0xf6>
 5a0:	00 00       	nop
			}
			

			return 0;
		}
}
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000b5a <__udivmodqi4>:
 b5a:	99 1b       	sub	r25, r25
 b5c:	79 e0       	ldi	r23, 0x09	; 9
 b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__udivmodqi4_ep>

00000b60 <__udivmodqi4_loop>:
 b60:	99 1f       	adc	r25, r25
 b62:	96 17       	cp	r25, r22
 b64:	08 f0       	brcs	.+2      	; 0xb68 <__udivmodqi4_ep>
 b66:	96 1b       	sub	r25, r22

00000b68 <__udivmodqi4_ep>:
 b68:	88 1f       	adc	r24, r24
 b6a:	7a 95       	dec	r23
 b6c:	c9 f7       	brne	.-14     	; 0xb60 <__udivmodqi4_loop>
 b6e:	80 95       	com	r24
 b70:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000aea <__divmodhi4>:
 aea:	97 fb       	bst	r25, 7
 aec:	07 2e       	mov	r0, r23
 aee:	16 f4       	brtc	.+4      	; 0xaf4 <__divmodhi4+0xa>
 af0:	00 94       	com	r0
 af2:	07 d0       	rcall	.+14     	; 0xb02 <__divmodhi4_neg1>
 af4:	77 fd       	sbrc	r23, 7
 af6:	09 d0       	rcall	.+18     	; 0xb0a <__divmodhi4_neg2>
 af8:	0e 94 89 05 	call	0xb12	; 0xb12 <__udivmodhi4>
 afc:	07 fc       	sbrc	r0, 7
 afe:	05 d0       	rcall	.+10     	; 0xb0a <__divmodhi4_neg2>
 b00:	3e f4       	brtc	.+14     	; 0xb10 <__divmodhi4_exit>

00000b02 <__divmodhi4_neg1>:
 b02:	90 95       	com	r25
 b04:	81 95       	neg	r24
 b06:	9f 4f       	sbci	r25, 0xFF	; 255
 b08:	08 95       	ret

00000b0a <__divmodhi4_neg2>:
 b0a:	70 95       	com	r23
 b0c:	61 95       	neg	r22
 b0e:	7f 4f       	sbci	r23, 0xFF	; 255

00000b10 <__divmodhi4_exit>:
 b10:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000b12 <__udivmodhi4>:
 b12:	aa 1b       	sub	r26, r26
 b14:	bb 1b       	sub	r27, r27
 b16:	51 e1       	ldi	r21, 0x11	; 17
 b18:	07 c0       	rjmp	.+14     	; 0xb28 <__udivmodhi4_ep>

00000b1a <__udivmodhi4_loop>:
 b1a:	aa 1f       	adc	r26, r26
 b1c:	bb 1f       	adc	r27, r27
 b1e:	a6 17       	cp	r26, r22
 b20:	b7 07       	cpc	r27, r23
 b22:	10 f0       	brcs	.+4      	; 0xb28 <__udivmodhi4_ep>
 b24:	a6 1b       	sub	r26, r22
 b26:	b7 0b       	sbc	r27, r23

00000b28 <__udivmodhi4_ep>:
 b28:	88 1f       	adc	r24, r24
 b2a:	99 1f       	adc	r25, r25
 b2c:	5a 95       	dec	r21
 b2e:	a9 f7       	brne	.-22     	; 0xb1a <__udivmodhi4_loop>
 b30:	80 95       	com	r24
 b32:	90 95       	com	r25
 b34:	bc 01       	movw	r22, r24
 b36:	cd 01       	movw	r24, r26
 b38:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000b90 <_fini>:
 b90:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000b92 <__funcs_on_exit>:
 b92:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000b94 <__simulator_exit>:
 b94:	08 95       	ret

Disassembly of section .text.exit:

00000b72 <exit>:
 b72:	ec 01       	movw	r28, r24
 b74:	0e 94 c9 05 	call	0xb92	; 0xb92 <__funcs_on_exit>
 b78:	0e 94 c8 05 	call	0xb90	; 0xb90 <_fini>
 b7c:	ce 01       	movw	r24, r28
 b7e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__simulator_exit>
 b82:	ce 01       	movw	r24, r28
 b84:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_Exit>

Disassembly of section .text.strlen:

00000abe <strlen>:
 abe:	cf 92       	push	r12
 ac0:	df 92       	push	r13
 ac2:	ef 92       	push	r14
 ac4:	6b 01       	movw	r12, r22
 ac6:	e8 2e       	mov	r14, r24
 ac8:	a8 2f       	mov	r26, r24
 aca:	cb 01       	movw	r24, r22
 acc:	fc 01       	movw	r30, r24
 ace:	24 91       	lpm	r18, Z
 ad0:	a7 fd       	sbrc	r26, 7
 ad2:	20 81       	ld	r18, Z
 ad4:	22 23       	and	r18, r18
 ad6:	19 f0       	breq	.+6      	; 0xade <strlen+0x20>
 ad8:	01 96       	adiw	r24, 0x01	; 1
 ada:	a1 1d       	adc	r26, r1
 adc:	f7 cf       	rjmp	.-18     	; 0xacc <strlen+0xe>
 ade:	8c 19       	sub	r24, r12
 ae0:	9d 09       	sbc	r25, r13
 ae2:	ef 90       	pop	r14
 ae4:	df 90       	pop	r13
 ae6:	cf 90       	pop	r12
 ae8:	08 95       	ret

Disassembly of section .text._Exit:

00000b8c <_Exit>:
 b8c:	0e 94 56 00 	call	0xac	; 0xac <_exit>
